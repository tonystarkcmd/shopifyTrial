
<style>
  .pswp__img{
/*     width:100% !important; */
    height:auto !important;
  }
  .pswp__scroll-wrap{
    background: #000000c7;
  }
  .pswp__ui{
    z-index: 6;
    position: fixed !important;
    right: 0 !important;
  }
  .D_none_psw, .pswp__caption{
    display:none;
  }
  .my-gallery img {
  width: 100%;
  height: auto;
}
.my-gallery.slider-nav.slick-initialized.slick-slider  {
  padding: 0px 10px;
}
.slick-next{
  display: none !important;
}
.my-gallery figure {
  display: block;
  float: left;
  margin: 0 5px 5px 0;
  width: 150px;
}
.my-gallery figcaption {
  display: none;
}


.my-gallery {
  max-width: 400px;
  margin: 0 auto;
}
  
 .my-gallery img {
   width: 100%;
    display: block;
    height: auto;
}

.photoSwipeOpen .slick-track {
  transition: none !important; 
}


.slider-nav img
    max-width: 200px;
    display: block;
}

.slider-nav .slick-track {
    transform: none !important;  
  }

  
  .slider-nav .slick-current.slick-active {
    padding-bottom: 6px;
    border-bottom: 2px solid #adadad;
  }

  button.pswp__button.pswp__button--close{
    font-size: 20px;
  }

  .slider-main{
    visibility: hidden; 
  }

  .slider-nav{
    visibility: hidden; 
  }

  .slick-initialized{
    visibility: visible;
  }
  


  .slider-main figure a {
      display: block;
  height: 0;
  overflow: hidden;
  padding-bottom: 100%;
  position: relative;
  text-align: center;
  }
  
  .slider-main figure img {
  display: inline-block;
  height: auto;
  left: 50%;
  max-height: 100%;
  max-width: 100%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  width: auto;
}

.pswp__bg {
  opacity: 0.8 !important;
}
</style>

<div class="jozzie"></div>


  <div class="my-gallery slider-main" itemscope itemtype="http://schema.org/ImageGallery">
       {%- for media in product.media -%}
         <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
          <a href="{{ media | img_url:'master' }}" itemprop="contentUrl" data-size="1200x1800">
          <img src="{{ media | img_url:'master' }}" itemprop="thumbnail" alt="Image description" />
          </a>
        </figure>
      {%- endfor -%}


  </div>

  <div class="my-gallery slider-nav" itemscope itemtype="http://schema.org/ImageGallery">
  {%- for media in product.media -%}
     <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
          <img src="{{ media | img_url:'master' }}" itemprop="thumbnail" alt="Image description" />
    </figure>
      {%- endfor -%}
  </div>




<!-- Root element of PhotoSwipe. Must have class pswp. -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe. 
         It's a separate element, as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

        <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
        <!-- don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                <!--  Controls are self-explanatory. Order can be changed. -->

                <div class="D_none_psw pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)">X</button>

                <button class="D_none_psw pswp__button pswp__button--share" title="Share"></button>

                <button class="D_none_psw pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="D_none_psw pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                      <div class="pswp__preloader__cut">
                        <div class="pswp__preloader__donut"></div>
                      </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div> 
            </div>

            <button class="D_none_psw pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>

            <button class=" D_none_psw pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>

            <div class="D_none_psw pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
          </div>
        </div>
</div>

<script>
  var initPhotoSwipeFromDOM = function(gallerySelector) {

    // parse slide data (url, title, size ...) from DOM elements 
    // (children of gallerySelector)
    var parseThumbnailElements = function(el) {
        var thumbElements = el.childNodes,
            numNodes = thumbElements.length,
            items = [],
            figureEl,
            linkEl,
            size,
            item;

        for(var i = 0; i < numNodes; i++) {

            figureEl = thumbElements[i]; // <figure> element

            // include only element nodes 
            if(figureEl.nodeType !== 1) {
                continue;
            }

                    
          
            if(figureEl.className.indexOf('slick-cloned') > 0) {
                continue;
            }
          
          
            linkEl = figureEl.children[0]; // <a> element

            size = linkEl.getAttribute('data-size').split('x');

            // create slide object
            item = {
                src: linkEl.getAttribute('href'),
                w: parseInt(size[0], 10),
                h: parseInt(size[1], 10)
            };



            if(figureEl.children.length > 1) {
                // <figcaption> content
                item.title = figureEl.children[1].innerHTML; 
            }

            if(linkEl.children.length > 0) {
                // <img> thumbnail element, retrieving thumbnail url
                item.msrc = linkEl.children[0].getAttribute('src');
            } 

            item.el = figureEl; // save link to element for getThumbBoundsFn
            items.push(item);
        }

      // console.log(items);
        return items;
    };

    // find nearest parent element
    var closest = function closest(el, fn) {
        return el && ( fn(el) ? el : closest(el.parentNode, fn) );
    };

    // triggers when user clicks on thumbnail
    var onThumbnailsClick = function(e) {
      // alert("Image click");
        e = e || window.event;
        e.preventDefault ? e.preventDefault() : e.returnValue = false;

        var eTarget = e.target || e.srcElement;

        // find root element of slide
        var clickedListItem = closest(eTarget, function(el) {
            return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
        });

        if(!clickedListItem) {
            return;
        }

        // find index of clicked item by looping through all child nodes
        // alternatively, you may define index via data- attribute
        var clickedGallery = clickedListItem.parentNode,
            childNodes = clickedListItem.parentNode.childNodes,
            numChildNodes = childNodes.length,
            nodeIndex = 0,
            index;

        for (var i = 0; i < numChildNodes; i++) {
            if(childNodes[i].nodeType !== 1) { 
                continue; 
            }

            if(childNodes[i] === clickedListItem) {
                index = nodeIndex;
                break;
            }
            nodeIndex++;
        }

      
        if(index >= 0) {
            // open PhotoSwipe if valid index found
            openPhotoSwipe( index, clickedGallery );
        }
        return false;
    };

    // parse picture index and gallery index from URL (#&pid=1&gid=2)
    var photoswipeParseHash = function() {
      // alert("Image zoom");
        var hash = window.location.hash.substring(1),
        params = {};

        if(hash.length < 5) {
            return params;
        }

        var vars = hash.split('&');
        for (var i = 0; i < vars.length; i++) {
            if(!vars[i]) {
                continue;
            }
            var pair = vars[i].split('=');  
            if(pair.length < 2) {
                continue;
            }           
            params[pair[0]] = pair[1];
        }

        if(params.gid) {
            params.gid = parseInt(params.gid, 10);
        }

        return params;
    };
    
    
    

    var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
      $('body').addClass('photoSwipeOpen');
        var pswpElement = document.querySelectorAll('.pswp')[0],
            gallery,
            options,
            items;

        items = parseThumbnailElements(galleryElement);
      
      index -= 1;
      // console.log(index);

        // define options (if needed)
        options = {

            // define gallery index (for URL)
            galleryUID: galleryElement.getAttribute('data-pswp-uid'),

            getThumbBoundsFn: function(index) {
              // alert("Image zoom");
                // See Options -> getThumbBoundsFn section of documentation for more info
                var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                    pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                    rect = thumbnail.getBoundingClientRect(); 

                return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
            }

        };

        // PhotoSwipe opened from URL
        if(fromURL) {
            if(options.galleryPIDs) {
                // parse real index when custom PIDs are used 
                // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
                for(var j = 0; j < items.length; j++) {
                    if(items[j].pid == index) {
                        options.index = j;
                        break;
                    }
                }
            } else {
                // in URL indexes start from 1
                options.index = parseInt(index, 10) - 1;
            }
        } else {
            options.index = parseInt(index, 10);
        }

        // exit if index not found
        if( isNaN(options.index) ) {
            return;
        }

        if(disableAnimation) {
            options.showAnimationDuration = 0;
        }

        // Pass data to PhotoSwipe and initialize it
        gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
        gallery.init();
        
        gallery.listen('close', function() { 
            $('body').removeClass('photoSwipeOpen');
        });
      
        gallery.listen('afterChange', function() { 
          
          var curr = gallery.currItem;
          var index2 = curr.el.dataset.slickIndex;
          console.log(index2);
          // $('.slider-main').slick('slickGoTo', index);
          
    $('.slider-main').slick('slickGoTo', index2);
          
        });

    };

    // loop through all gallery elements and bind events
    var galleryElements = document.querySelectorAll( gallerySelector );

    for(var i = 0, l = galleryElements.length; i < l; i++) {
        galleryElements[i].setAttribute('data-pswp-uid', i+1);
        galleryElements[i].onclick = onThumbnailsClick;
    }

    // Parse URL and open gallery if it contains #&pid=3&gid=1
    var hashData = photoswipeParseHash();
    if(hashData.pid && hashData.gid) {
        openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
    }
};

// execute above function
initPhotoSwipeFromDOM('.slider-main');


$(document).ready(function() {

    $('.slider-main').slick({
  slidesToShow: 1,
  slidesToScroll: 1,
  arrows: false,
  fade: false,
  asNavFor: '.slider-nav',
  speed: 300,
  infinite: true
 });

 $('.slider-nav').slick({
  slidesToShow: 5,
  cssEase: 'linear',
  slidesToScroll: 3,
  asNavFor: '.slider-main',
  dots: false,
  focusOnSelect: true,
  infinite: false,
  centerPadding: '5px',
 swipeToSlide: true
 });

   //remove active class from all thumbnail slides
//  $('.slider-nav .slick-slide').removeClass('slick-active');

//   $('.slider-nav .slick-slide').eq(0).addClass('slick-active');

//    // On before slide change match active thumbnail to current slide
//  $('.slider-main').on('beforeChange', function (event, slick, currentSlide, nextSlide) {
//   var mySlideNumber = nextSlide;
//    console.log("mySlideNumber ", mySlideNumber);
//   $('.slider-nav .slick-slide').removeClass('slick-active');
//   $('.slider-nav .slick-slide').eq(mySlideNumber).addClass('slick-active');
// });
  
  {% comment %}
   //set active class to first thumbnail slides
 $('.slider-nav .slick-slide').eq(0).addClass('slick-active');
  


 //remove active class from all thumbnail slides
 $('.slider-nav .slick-slide').removeClass('slick-active');

 //set active class to first thumbnail slides
 $('.slider-nav .slick-slide').eq(0).addClass('slick-active');
  
  

{% endcomment %}

{% comment %}
$('.slick-1').on('click', function() {
  // $('.slider-main').slick("slickSetOption", 'speed', 1, true);
  $('.slider-main').slick("slickSetOption", 'waitForAnimate', false, false);
  $('.slider-main').slick('slickGoTo', 0);
  // $('.slider-main').slick("slickSetOption", 'speed', 300, true);
  $('.slider-main').slick("slickSetOption", 'waitForAnimate', true, false);
});

$('.slick-2').on('click', function() {
  $('.slider-main').slick('slickGoTo', 1);
});

$('.slick-3').on('click', function() {
  $('.slider-main').slick('slickGoTo', 2);
});

{% endcomment %}
  
  
  });
</script>